{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n\r\n    // Normally, this would be import: `import SortableList from '@palsch/svelte-sortablejs';`\r\n    import SortableList from \"../../SortableList.svelte\";\r\n\r\n    let items = [1, 2, 3, 4].map(i => ({ identifierNumber: i, text: \"item \" + i }));\r\n    let items2 = [-1, -2, -3, -4].map(i => ({ identifierNumber: i, text: i + \" ɯǝʇı \" }));\r\n    let currentNumber = 5;\r\n\r\n    const sortableOptions = {\r\n        group: \"items\", \r\n        animation: 100, \r\n        easing: \"cubic-bezier(1, 0, 0, 1)\"\r\n    };\r\n\r\n    function addItem() {\r\n        items.push({\r\n            identifierNumber: currentNumber, \r\n            text: \"item \" + currentNumber\r\n        });\r\n        currentNumber ++;\r\n        items = items; // refresh UI\r\n    }\r\n\r\n    function removeItem() {\r\n        items.pop();\r\n        items = items; // refresh UI\r\n    }\r\n\r\n    function itemOrderChanged(event) {\r\n        console.log(\"item order changed!\", event.detail);\r\n    }\r\n\r\n    function getItemById(id) {\r\n        return items.concat(items2).find(item => item.identifierNumber == id);\r\n    }\r\n\r\n</script>\r\n\r\n<h1>svelte-sortablejs example</h1>\r\n\r\n<h2>Normal</h2>\r\n\r\n<p>Try dragging them around!</p>\r\n\r\n<SortableList { sortableOptions } on:orderChanged={ itemOrderChanged } \r\n        bind:items idKey=\"identifierNumber\" let:item { getItemById }\r\n        liClass=\"largerFont\">\r\n    Hey, it's { item.text }!\r\n</SortableList>\r\n\r\n\r\n<button on:click={ addItem }>add item</button>\r\n<button on:click={ removeItem }>remove item</button>\r\n\r\n<br><br>\r\n<hr>\r\n<br><br>\r\n\r\n<h2>Multiple groups</h2>\r\n<p>Dragging between groups is supported as well. Try dragging these to the list above and vice-versa!</p>\r\n\r\n<SortableList { sortableOptions } on:orderChanged={ itemOrderChanged } \r\n        bind:items={ items2 } idKey=\"identifierNumber\" let:item { getItemById } \r\n        liClass=\"largerFont crazy\">\r\n    ¡{ item.text } s,ʇı 'ʎǝH\r\n</SortableList>\r\n\r\n<style>\r\n\r\n    /* you need to use :global so that Svelte does not optimize away the in its view \"unused\" classes\r\n       see https://github.com/sveltejs/svelte/issues/2870 */\r\n    :global(.largerFont) {\r\n        font-size: 1.5rem;\r\n    }\r\n\r\n    :global(.crazy) {\r\n        color: red;\r\n    }\r\n\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "AAwEY,WAAW,AAAE,CAAC,AAClB,SAAS,CAAE,MAAM,AACrB,CAAC,AAEO,MAAM,AAAE,CAAC,AACb,KAAK,CAAE,GAAG,AACd,CAAC"
}